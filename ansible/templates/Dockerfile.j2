# Multi-stage Dockerfile for {{ app_name }}
# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Build application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Create app user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./

# Create necessary directories
RUN mkdir -p /app/data /app/logs /app/config
RUN chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s \
            --timeout=10s \
            --start-period=30s \
            --retries=3 \
            CMD curl -f http://localhost:8080/health || exit 1

# Start application
CMD ["npm", "start"]

# Alternative Dockerfile for Python applications
# FROM python:3.11-slim AS builder
# 
# WORKDIR /app
# 
# COPY requirements.txt .
# RUN pip install --no-cache-dir -r requirements.txt
# 
# COPY . .
# 
# FROM python:3.11-slim AS production
# 
# WORKDIR /app
# 
# COPY --from=builder /app /app
# 
# RUN useradd -m -u 1001 appuser && chown -R appuser:appuser /app
# USER appuser
# 
# EXPOSE {{ app_port }}
# 
# HEALTHCHECK --interval={{ docker_health_check_interval }} \
#             --timeout={{ docker_health_check_timeout }} \
#             --start-period=30s \
#             --retries={{ docker_health_check_retries }} \
#             CMD curl -f http://localhost:{{ app_port }}{{ app_health_check_path }} || exit 1
# 
# CMD ["python", "app.py"]

# Alternative Dockerfile for Java applications
# FROM openjdk:11-jre-slim AS production
# 
# WORKDIR /app
# 
# COPY target/{{ app_name }}-{{ app_version }}.jar app.jar
# 
# RUN useradd -m -u 1001 appuser && chown -R appuser:appuser /app
# USER appuser
# 
# EXPOSE {{ app_port }}
# 
# HEALTHCHECK --interval={{ docker_health_check_interval }} \
#             --timeout={{ docker_health_check_timeout }} \
#             --start-period=30s \
#             --retries={{ docker_health_check_retries }} \
#             CMD curl -f http://localhost:{{ app_port }}{{ app_health_check_path }} || exit 1
# 
# CMD ["java", "-jar", "app.jar"] 