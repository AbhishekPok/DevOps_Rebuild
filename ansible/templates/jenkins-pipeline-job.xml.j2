<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1289.vd229156d5354">
  <description>{{ app_name }} CI/CD Pipeline</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.discord.notifier.DiscordNotifier_-DiscordJobProperty plugin="discord-notifier@1.3.0">
      <webhook>false</webhook>
    </hudson.plugins.discord.notifier.DiscordNotifier_-DiscordJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.34">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.3">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3697.vb_490d3e019f6">
    <script>pipeline {
    agent any
    
    environment {
        APP_NAME = '{{ app_name }}'
        APP_VERSION = '{{ app_version }}'
        DOCKER_REGISTRY = '{{ container_registry }}'
        DOCKER_IMAGE = "${DOCKER_REGISTRY}/${APP_NAME}"
        DOCKER_TAG = "${APP_VERSION}-${BUILD_NUMBER}"
        DEPLOY_HOST = '{{ groups["app_servers"][0] | default("localhost") }}'
        DEPLOY_USER = '{{ ansible_user }}'
    }
    
    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        ansiColor('xterm')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Code Quality') {
            parallel {
                stage('SonarQube Analysis') {
                    when {
                        expression { params.SONARQUBE_ANALYSIS == true }
                    }
                    steps {
                        script {
                            def scannerHome = tool 'SonarQubeScanner'
                            withSonarQubeEnv('SonarQube') {
                                sh "${scannerHome}/bin/sonar-scanner \
                                    -Dsonar.projectKey=${APP_NAME} \
                                    -Dsonar.sources=. \
                                    -Dsonar.host.url={{ jenkins_sonarqube_url }} \
                                    -Dsonar.login={{ jenkins_sonarqube_token }}"
                            }
                        }
                    }
                }
                
                stage('Security Scan') {
                    when {
                        expression { params.SECURITY_SCAN == true }
                    }
                    steps {
                        script {
                            // Run security scanning tools
                            sh 'npm audit --audit-level moderate || true'
                            sh 'snyk test || true'
                        }
                    }
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                script {
                    sh 'npm install'
                    sh 'npm test'
                }
            }
            post {
                always {
                    junit '**/test-results/*.xml'
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'coverage',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                        docker build \
                            --build-arg APP_NAME=${APP_NAME} \
                            --build-arg APP_VERSION=${APP_VERSION} \
                            -t ${DOCKER_IMAGE}:${DOCKER_TAG} \
                            -t ${DOCKER_IMAGE}:latest \
                            .
                    """
                }
            }
        }
        
        stage('Security Scan Image') {
            when {
                expression { params.IMAGE_SCAN == true }
            }
            steps {
                script {
                    sh 'trivy image --exit-code 1 --severity HIGH,CRITICAL ${DOCKER_IMAGE}:${DOCKER_TAG} || true'
                }
            }
        }
        
        stage('Push to Registry') {
            when {
                expression { params.PUSH_TO_REGISTRY == true }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-registry-credentials', usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PASS')]) {
                        sh 'echo $REGISTRY_PASS | docker login ${DOCKER_REGISTRY} -u $REGISTRY_USER --password-stdin'
                        sh 'docker push ${DOCKER_IMAGE}:${DOCKER_TAG}'
                        sh 'docker push ${DOCKER_IMAGE}:latest'
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                expression { params.DEPLOY_STAGING == true }
            }
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'deployment-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                        sh """
                            ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DEPLOY_HOST} << 'EOF'
                                cd {{ app_deploy_path }}
                                docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}
                                docker-compose down
                                docker-compose up -d
                                docker system prune -f
                            EOF
                        """
                    }
                }
            }
        }
        
        stage('Integration Tests') {
            when {
                expression { params.INTEGRATION_TESTS == true }
            }
            steps {
                script {
                    sh 'npm run test:integration'
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                expression { params.DEPLOY_PRODUCTION == true }
            }
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'deployment-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                        sh """
                            ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DEPLOY_HOST} << 'EOF'
                                cd {{ app_deploy_path }}
                                docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}
                                docker-compose down
                                docker-compose up -d
                                docker system prune -f
                            EOF
                        """
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    sh """
                        sleep 30
                        curl -f http://${DEPLOY_HOST}:{{ app_port }}{{ app_health_check_path }} || exit 1
                    """
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            script {
                if (params.SLACK_NOTIFICATION == true) {
                    slackSend(
                        channel: '#deployments',
                        color: 'good',
                        message: "✅ ${APP_NAME} v${APP_VERSION} deployed successfully! Build: ${BUILD_NUMBER}"
                    )
                }
            }
        }
        failure {
            script {
                if (params.SLACK_NOTIFICATION == true) {
                    slackSend(
                        channel: '#deployments',
                        color: 'danger',
                        message: "❌ ${APP_NAME} v${APP_VERSION} deployment failed! Build: ${BUILD_NUMBER}"
                    )
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec>H/5 * * * *</spec>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <disabled>false</disabled>
</flow-definition> 